---
- name: Determine version infos
  block:
    - name: Get latest release info from github
      ansible.builtin.uri:
        url: "https://api.github.com/repos/paperless-ngx/paperless-ngx/releases/latest"
        method: GET
        return_content: true
        status_code: 200
        body_format: json
        user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
        password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
      no_log: "{{ not lookup('env', 'MOLECULE_DEBUG') | bool }}"
      register: _latest_release_api_response
      until: _latest_release_api_response.status == 200
      retries: 5

    - name: "Set paperless version to {{ _latest_release_api_response.json.tag_name[1:] }}"
      ansible.builtin.set_fact:
        paperless_ngx_version: "{{ _latest_release_api_response.json.tag_name[1:] }}"
  when:
    - paperless_ngx_version == "latest"
  delegate_to: localhost
  run_once: true

- name: Set and check download URL
  block:
    - name: Set download link
      ansible.builtin.set_fact:
        _release__download_url: "https://github.com/paperless-ngx/paperless-ngx/releases/download/v{{ paperless_ngx_version }}/paperless-ngx-v{{ paperless_ngx_version }}.tar.xz"
    
    - name: Probe download link is valid
      ansible.builtin.uri:
        url: "{{ _release__download_url }}"
        method: GET
        return_content: false
      register: _release_download_uri_response
      failed_when: false

    - name: Check probes return code
      ansible.builtin.assert:
        that: _release_download_uri_response.status == 200
        msg: 'paperless-ngx version v{{ paperless_ngx_version }} has no downloadable release file (used {{ _release__download_url }}).'

  delegate_to: localhost
  run_once: true
    